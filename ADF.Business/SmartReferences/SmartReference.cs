//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Model           : SmartReferences
//     Template        : Business Object Entity.tpl
//     Runtime Version : $Version$
//     Generation date : 26-9-2007 13:33:55
//
//     Changes to this file may cause incorrect behavior and may be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Adf.Base.Domain;
using Adf.Base.Validation;
using Adf.Core.Data;
using Adf.Core.Domain;
using Adf.Core.Identity;
using Adf.Core.Resources;
using Adf.Data.SmartReferences;

namespace Adf.Business.SmartReferences
{
    /// <summary>
    /// Represents the SmartReference for a DomainObject and provides all fatory functionalities for the DomainObject.
    /// </summary>
    public partial class SmartReference<T> : DomainObject, ISmartReference
    {
        #region CodeGuard(Constructors)
        /// <summary>
        /// Initializes a new instances of SmartReference.
        /// </summary>
        public SmartReference()
        {
            state = NullInternalState.Null;
        }

        /// Needs to be public to be able to create an instance dynamically (Activator.CreateInstance)
        /// <summary>
        /// Initializes a new instance of SmartReference with the supplied 
        /// <see cref="IInternalState"/>.
        /// </summary>
        /// <param name="newstate">The <see cref="IInternalState"/>.</param>
        public SmartReference(IInternalState newstate)
        {
            state = newstate;
        }

        #endregion CodeGuard(Constructors)

        #region CodeGuard(Empty)

        //        private static SmartReference<> empty = new SmartReference<>();
        //	    
        //	    public static SmartReference<> Empty
        //	    {
        //	        get
        //	        {
        //	            return empty;
        //	        }
        //        }

        #endregion CodeGuard(Empty)

        #region CodeGuard(Method Save)
        /// <summary>
        /// Saves this instance.
        /// </summary>
        /// <returns>True if the saving is successful, false otherwise.</returns>
        public bool Save()
        {
            return SmartReferenceFactory.Save(this);
        }

        #endregion CodeGuard(Method Save)

        #region CodeGuard(Method Remove)
        /// <summary>
        /// Removes this instance.
        /// </summary>
        /// <returns>True if the removal is successful, false otherwise.</returns>
        public bool Remove()
        {
            return SmartReferenceFactory.Remove(this);
        }

        #endregion CodeGuard(Method Remove)


        #region CodeGuard(Property Id)
        /// <summary>
        /// Gets the <see cref="ID"/> of this instance.
        /// </summary>
        public override ID Id
        {
            get { return state.GetValue<ID>(SmartReferenceDescriber.Id); }
        }

        #endregion CodeGuard(Property Id)

        #region CodeGuard(Property Title)
        /// <summary>
        /// Gets the title of this instance.
        /// </summary>
        public override string Title
        {
            get { return ResourceManager.GetString(Name); }
        }

        #endregion CodeGuard(Property Title)

        #region CodeGuard(Property Name)
        /// <summary>
        /// Gets or sets the name of this instance.
        /// </summary>
        [NonEmpty]
        [MaxLength(255)]
        public string Name
        {
            get { return state.Get<string>(SmartReferenceDescriber.Name); }
            set { state.Set(SmartReferenceDescriber.Name, value); }
        }

        #endregion CodeGuard(Property Name)

        #region CodeGuard(Property Description)
        /// <summary>
        /// Gets or sets the description of this instance.
        /// </summary>
        [NonEmpty]
        [MaxLength(255)]
        public string Description
        {
            get { return state.Get<string>(SmartReferenceDescriber.Description); }
            set { state.Set(SmartReferenceDescriber.Description, value); }
        }

        #endregion CodeGuard(Property Description)

        #region CodeGuard(Property IsDefault )
        /// <summary>
        /// Gets or sets whether this instance is default or not.
        /// </summary>
        [NonEmpty]
        public bool IsDefault
        {
            get
            {
                return state.Get<bool>(SmartReferenceDescriber.IsDefault);
            }
            set
            {
                state.Set(SmartReferenceDescriber.IsDefault, value);
            }
        }

        #endregion CodeGuard(Property IsDefault)

        #region CodeGuard(Property BeginDate)
        /// <summary>
        /// Gets or sets the begindate of this instance
        /// </summary>
        public DateTime? BeginDate
        {
            get
            {
                return state.GetNullable<DateTime>(SmartReferenceDescriber.BeginDate);
            }
            set
            {
                state.SetNullable(SmartReferenceDescriber.BeginDate, value);
            }
        }

        #endregion CodeGuard(Property BeginDate)

        #region CodeGuard(Property EndDate)
        /// <summary>
        /// Gets or sets the enddate of this instance
        /// </summary>
        public DateTime? EndDate
        {
            get
            {
                return state.GetNullable<DateTime>(SmartReferenceDescriber.EndDate);
            }
            set
            {
                state.SetNullable(SmartReferenceDescriber.EndDate, value);
            }
        }

        #endregion CodeGuard(Property EndDate)

        #region CodeGuard(Custom)

        #region CodeGuard(Property Type )
        
        /// <summary>
        /// Gets the <see cref="Type"/> of this instance.
        /// </summary>
        public Type Type
        {
            get { return typeof (T); }
        }

        #endregion CodeGuard(Property Type)

        #endregion CodeGuard(Custom)
    }
}
