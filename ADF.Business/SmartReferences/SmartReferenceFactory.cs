//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated using Tobago MDA.
//     Model           : SmartReferences
//     Template        : Business Object Factory.tpl
//     Runtime Version : $Version$
//     Generation date : 26-9-2007 13:35:39
//
//     Changes to this file may cause incorrect behavior and may be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Adf.Base.Domain;
using Adf.Core.Data;
using Adf.Core.Domain;
using Adf.Core.Identity;
using Adf.Data.Search;
using Adf.Data.SmartReferences;

namespace Adf.Business.SmartReferences
{
    /// <summary>
    /// Represents SmartReference Factory that provides functionality for various factory operations.
    /// </summary>
    public static class SmartReferenceFactory
    {
        #region CodeGuard(Method New)
        /// <summary>
        /// Creates and returns a SmartReference.
        /// </summary>
        /// <typeparam name="T">The supplied <see cref="Type"/>.</typeparam>
        /// <returns>The newly created SmartReference.</returns>
        public static SmartReference<T> New<T>()
        {
            return new SmartReference<T>(SmartReferenceGateway.New(typeof(T).Name));
        }

        /// <summary>
        /// Creates and returns an <see cref="ISmartReference"/> using the supplied <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The supplied <see cref="Type"/>.</param>
        /// <returns>The newly created <see cref="ISmartReference"/>.</returns>
        public static ISmartReference New(Type type)
        {
            var cotype = typeof(SmartReference<>).MakeGenericType(new[] { type });

            return Activator.CreateInstance(cotype, SmartReferenceGateway.New(type.Name)) as ISmartReference;
        }
        #endregion CodeGuard(Method New)

        #region CodeGuard(Method List)
        /// <summary>
        /// Returns a list of type DomainCollection with the supplied
        /// array of <see cref="IInternalState"/> added to it.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="states">The supplied array of <see cref="IInternalState"/>.</param>
        /// <returns>A DomainCollection.</returns>
        private static DomainCollection<SmartReference<T>> List<T>(IEnumerable<IInternalState> states)
        {
            var list = new DomainCollection<SmartReference<T>>();

            foreach (var state in states)
            {
                list.Add(new SmartReference<T>(state));
            }

            return list;
        }

        /// <summary>
        /// Returns an array of type <see cref="ISmartReference"/> for the supplied <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The supplied <see cref="Type"/>.</param>
        /// <returns>An array of type <see cref="ISmartReference"/>.</returns>
        public static ISmartReference[] GetByType(Type type)
        {
            return List(type, SmartReferenceGateway.GetByType(type.Name));
        }

        /// <summary>
        /// Creates and returns a SmartReference with the supplied name.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="name">The name.</param>
        /// <returns>The newly created SmartReference.</returns>
        public static SmartReference<T> GetByName<T>(string name)
        {
            return new SmartReference<T>(SmartReferenceGateway.GetByName(name, typeof(T).Name));
        }

        /// <summary>
        /// Creates and returns a list of <see cref="ISmartReference"/> with the 
        /// supplied <see cref="Type"/> and the supplied array of type <see cref="IInternalState"/>.
        /// </summary>
        /// <param name="type">The <see cref="Type"/>.</param>
        /// <param name="states">The array of type <see cref="IInternalState"/>.</param>
        /// <returns>The newly created array of type <see cref="IInternalState"/>.</returns>
        private static ISmartReference[] List(Type type, IEnumerable<IInternalState> states)
        {
            var cotype = typeof(SmartReference<>).MakeGenericType(new[] { type });

            return states.Select(state => Activator.CreateInstance(cotype, state) as ISmartReference).ToArray();
        }

        #endregion CodeGuard(Method List)

        #region CodeGuard(Method Search)
        /// <summary>
        /// Searches and Returns a DomainCollection for the supplied search object.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="searchObject">The search object.</param>
        /// <returns>A DomainCollection.</returns>
        public static DomainCollection<SmartReference<T>> Search<T>(ISearchObject searchObject)
        {
            return List<T>(SmartReferenceGateway.Search(searchObject.GetParameters()));
        }

        #endregion CodeGuard(Method Search)

        #region CodeGuard(Method Get)
        /// <summary>
        /// Returns a SmartReference for the supplied <see cref="ID"/>
        /// where T is <see cref="References"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id">The supplied <see cref="ID"/>.</param>
        /// <returns>A SmartReference.</returns>
        public static SmartReference<T> Get<T>(ID id) where T : References
        {
            return id.IsEmpty ? GetEmpty<T>() : new SmartReference<T>(SmartReferenceGateway.Get(id, typeof(T).Name));
        }

        /// <summary>
        /// Returns an <see cref="ISmartReference"/> for the supplied <see cref="ID"/>
        /// and <see cref="Type"/>.
        /// </summary>
        /// <param name="id">The <see cref="ID"/>.</param>
        /// <param name="type">The <see cref="Type"/>.</param>
        /// <returns>An <see cref="ISmartReference"/>.</returns>
        public static ISmartReference Get(ID id, Type type)
        {
            var cotype = typeof(SmartReference<>).MakeGenericType(new[] { type });

            if (id.IsEmpty)
            {
                return Activator.CreateInstance(cotype) as ISmartReference;
            }

            var state = SmartReferenceGateway.Get(id, type.Name);

            return Activator.CreateInstance(cotype, state) as ISmartReference;
        }

        /// <summary>
        /// Returns a DomainCollection of all SmartReferences of type T
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public static DomainCollection<SmartReference<T>> GetAll<T>()
        {
            return List<T>(SmartReferenceGateway.GetByType(typeof(T).Name));
        }

        #endregion CodeGuard(Method Get)

        #region CodeGuard(Property Count)
        /// <summary>
        /// Gets the number of records for a query.
        /// </summary>
        public static int Count
        {
            get
            {
                return SmartReferenceGateway.Count();
            }
        }

        #endregion CodeGuard(Property Count)

        #region CodeGuard(Method Remove)
        /// <summary>
        /// Removes the supplied <see cref="ISmartReference"/>.
        /// </summary>
        /// <param name="smartreference">The <see cref="ISmartReference"/>.</param>
        /// <returns>True if the removal is successful, false otherwise.</returns>
        public static bool Remove(ISmartReference smartreference)
        {
            var domainobject = smartreference as DomainObject;

            return domainobject == null || SmartReferenceGateway.Remove(domainobject.GetState());
        }

        #endregion CodeGuard(Method Remove)

        #region CodeGuard(Method Save)
        /// <summary>
        /// Persists the supplied SmartReference.
        /// </summary>
        /// <param name="smartreference">The supplied SmartReference.</param>
        /// <returns>True if the saving is successful, false otherwise.</returns>
        public static bool Save(ISmartReference smartreference)
        {
            var domainobject = smartreference as DomainObject;

            if (domainobject == null)
                return true;

            if (domainobject.IsAltered)
            {
                if (SmartReferenceGateway.Save(domainobject.GetState()))
                {
                    return false;
                }
            }

            return domainobject.SaveCompositions();
        }

        #endregion CodeGuard(Method Save)



        #region CodeGuard(Custom)
        /// <summary>
        /// Creates and returns a SmartReference.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>The newly created empty SmartReference.</returns>
        public static SmartReference<T> GetEmpty<T>()
        {
            return new SmartReference<T>();
        }

        #endregion CodeGuard(Custom)
    }
}
