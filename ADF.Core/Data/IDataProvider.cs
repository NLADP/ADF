using System;
using System.Data;
using Adf.Core.Query;

namespace Adf.Core.Data
{
    /// <summary>
    /// Provides functionality of database provider and database transaction. 
    /// Also use to get the Connection, Command, Adapter and SQL transaction management.
    /// </summary>
    public interface IDataProvider
    {
        /// <summary>
        /// Gets the data source type of <see cref="DataSourceType"/>.
        /// </summary>
        /// <returns>The data source type.</returns>
        DataSourceType Type { get; }

        /// <summary>
        /// Provides information about SQL command generated by the connection of <see cref="System.Data.IDbConnection"/> and query of <see cref="IAdfQuery"/>.
        /// </summary>
        /// <param name="connection">The <see cref="System.Data.IDbConnection"/> represents an open connection to a data source.</param>
        /// <param name="query">The <see cref="IAdfQuery"/> whose SQL command information is to be retrieved.</param>
        /// <returns>The requested command information object.</returns>
        IDbCommand GetCommand(DataSources datasource, IDbConnection connection, IAdfQuery query);

        /// <summary>
        /// Provides information to get a transaction to be performed at a data source.
        /// </summary>
        /// <param name="source">The <see cref="DataSources"/> used to get the data source name.</param>
        /// <returns>The <see cref="System.Data.IDbTransaction"/> object for the currently executing transaction.</returns>
        IDbTransaction GetTransaction(DataSources source);

        /// <summary>
        /// Provides information to start a transaction to be performed at a data source.
        /// </summary>
        /// <param name="source">The <see cref="DataSources"/> used to get the data source name.</param>
        /// <returns>The <see cref="System.Data.IDbTransaction"/> object for the currently executing transaction.</returns>
        /// <exception cref="System.Exception">An error occurred while trying to start the transaction.</exception>
        IDbTransaction StartTransaction(DataSources source);

        /// <summary>
        /// Commits the database transaction.
        /// </summary>
        /// <param name="source">The <see cref="DataSources"/> used to get the data source name.</param>
        /// <exception cref="System.Exception">An error occurred while trying to commit the transaction.</exception>
        /// <exception cref="System.InvalidOperationException">The transaction has already been committed or rolled back.-or- The connection is broken.</exception>
        void Commit(DataSources source);

        /// <summary>
        /// Rolls back a transaction from a pending state.
        /// </summary>
        /// <param name="source">The <see cref="DataSources"/> used to get the data source name.</param>
        /// <exception cref="System.Exception">An error occurred while trying to rollback the transaction.</exception>
        /// <exception cref="System.InvalidOperationException">The transaction has already been committed or rolled back.-or- The connection is broken.</exception>
        void Rollback(DataSources source);

        /// <summary>
        /// Specifies the connection object to associate with the transaction.
        /// </summary>
        /// <param name="source">The <see cref="DataSources"/> used to get the data source name.</param>
        /// <returns>The connection object to associate with the transaction.</returns>
        IDbConnection GetConnection(DataSources source);

        /// <summary>
        /// Provides information to get the data adapter.
        /// Used to fill the <see cref="System.Data.DataSet"/> and update a data source.
        /// </summary>
        /// <returns>The <see cref="System.Data.IDbDataAdapter"/> object.</returns>
        IDbDataAdapter GetAdapter();

        /// <summary>
        /// Provides information to setup the data adapter by the connection of <see cref="System.Data.IDbConnection"/>.
        /// </summary>
        /// <param name="connection">The <see cref="System.Data.IDbConnection"/> represents an open connection to a data source.</param>
        /// <param name="query">The <see cref="IAdfQuery"/> whose SQL information is to be retrieved.</param>
        /// <returns>The requested <see cref="System.Data.IDbDataAdapter"/> information object.</returns>
        IDbDataAdapter SetUpAdapter(DataSources datasource, IDbConnection connection, IAdfQuery query);

        /// <summary>
        /// Handle database specific exceptions thrown by the database while running queries.
        /// </summary>
        /// <param name="exception"></param>
        void HandleException(Exception exception, DataSources datasource, IAdfQuery query);
    }
}
