//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Model           : Dashboard
//     Template        : Value Object.tpl
//     Runtime Version : Tobago MDA Generator 1.7.0.62
//     Generation date : 08/09/2013 08:50:21
//
//     Changes to this file may cause incorrect behavior and may be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Text.RegularExpressions;
using Adf.Core;
using Adf.Core.Domain;

namespace Adf.Business.ValueObject 
{
    public struct Color : IValueObject, IEquatable<Color>, IComparable, IComparable<Color>
    {
        private string value;
        public object Value
        {
            get { return value; }
        }

        public override string ToString()
        {
            return string.IsNullOrEmpty(value) ? string.Empty : value;
        }

        #region CodeGuard(Expression)

        private static Regex Expression = new Regex(@"^([A-Fa-f0-9]{6})$");

        #endregion CodeGuard(Expression)
        
        public Color(string s)
        {
            //initialize
            value = null;

            if (string.IsNullOrEmpty(s)) return;

            if (!IsValidColor(s))
            {
                throw new FormatException(String.Format("Value {0} is not a valid color", s));
            }

            value = s;            
        }

        #region Validity

        #region CodeGuard(IsValid)
        
        /// <summary>
        /// Checks whether a value is a valid color.
        /// </summary>
        /// <param name="s">Name to try</param>
        /// <returns>true f parameter is a valid color</returns>
        public static bool IsValidColor(string s)
        {
            return Expression.IsMatch(s);
        }

        #endregion CodeGuard(IsValid)

        /// <summary>
        /// Checks whether the value presented is a valid color.
        /// </summary>
        /// <param name="s">The string that is validated to see if it contains a valid <see cref="Color"/>.</param>
        /// <param name="result">The resulting color, or the Color.Empty if the string did not contain a valid <see cref="Color"/>.</param>
        /// <returns>
        /// A <see cref="Color"></see> containing a fully qualified type name.
        /// </returns>
        public static bool TryParse(string s, out Color result)
        {
            result = Empty;

            if (string.IsNullOrEmpty(s))
            {
                return true;
            }

            if (!IsValidColor(s))
            {
                return false;
            }

            result = new Color(s);
            return true;
        }

		public static bool TryParse(string s, IFormatProvider provider, out Color result)
        {
            return TryParse(s, out result);
        }

        #endregion

        #region Empty

        public static Color Empty
        {
            get { return new Color(string.Empty); }
        }

        /// <summary>
        /// Gets a value indicating whether this instance is empty.
        /// </summary>
        /// <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        public bool IsEmpty
        {
            get { return string.IsNullOrEmpty(value); }
        }

        #endregion Empty

        #region Equality

        /// <summary>
        /// Identifies if the internal value of the parameter is equal to this object's internal value.
        /// </summary>
        /// <param name="other">color</param>
        /// <returns></returns>
        public bool Equals(Color other)
        {
            return value.Equals(other.value);
        }

        /// <summary>
        /// Compares this instance to another <see cref="Color"/> object.
        /// </summary>
        /// <param name="obj">The <see cref="Color"/> object to compare against.</param>
        /// <returns>
        /// <c>true</c> if both colors are the same; otherwise <c>false</c>
        /// </returns>
        public override bool Equals(object obj)
        {
            if (obj == null)
                return false;

            if (obj is Color)
                return Equals((Color) obj);

            return false;
        }

        public override int GetHashCode()
        {
            return value.GetHashCode();
        }

        /// <summary>
        /// Returns the equality of two <see cref="Color"/> objects.
        /// </summary>
        /// <param name="i">The first <see cref="Color"/>.</param>
        /// <param name="j">The second <see cref="Color"/>.</param>
        /// <returns>
        /// <c>true</c> if both colors are the same; otherwise <c>false</c>
        /// </returns>
        public static bool operator ==(Color i, Color j)
        {
            return i.Equals(j);
        }
        
        /// <summary>
        /// Returns the inequality of two <see cref="Color"/> objects.
        /// </summary>
        /// <param name="i">The first <see cref="Color"/>.</param>
        /// <param name="j">The second <see cref="Color"/>.</param>
        /// <returns>
        /// <c>true</c> if the colors are different; otherwise <c>false</c>
        /// </returns>
        public static bool operator !=(Color i, Color j)
        {
            return !i.Equals(j);
        }

        #endregion Equality

        #region Comparison

        ///<summary>
        ///Compares the current instance with another object of the same type.
        ///</summary>
        ///
        ///<returns>
        ///A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than obj. Zero This instance is equal to obj. Greater than zero This instance is greater than obj. 
        ///</returns>
        ///
        ///<param name="obj">An object to compare with this instance. </param>
        ///<exception cref="T:System.ArgumentException">obj is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        public int CompareTo(object obj)
        {
            if (obj == null)
                return 1;

            if (!(obj is Color)) 
                throw new ArgumentException("Object is not a color");

            Color other = (Color) obj;

            return value.CompareTo(other.value);
        }

        ///<summary>
        ///Compares the current object with another object of the same type.
        ///</summary>
        ///
        ///<returns>
        ///A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other. 
        ///</returns>
        ///
        ///<param name="other">An object to compare with this object.</param>
        public int CompareTo(Color other)
        {
            return value.CompareTo(other.value);
        }

        #endregion

        #region CodeGuard(Custom)

        #endregion CodeGuard(Custom)
    }
}
