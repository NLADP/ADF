//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated using Tobago MDA.
//     Model           : <Tobago.ProjectName>
//     Template        : Cached Domain Object Factory.tpl
//     Runtime Version : $Version$
//     Generation date : <Tobago.CurrentDate>
//
//     Changes to this file may cause incorrect behavior and may be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Adf.Core.Data;
using Adf.Core.Identity;
using Adf.Core.State;
using Adf.Base.Domain;
using Adf.Data.Search;
using $Class.Model$.Data;

namespace $Class.Model$.Business
{
	/// <summary>
	/// $Class.Name.Pascal$ Factory, used to instantiate $Class.Name.Pascal$ classes
	/// </summary>
	public static partial class $Class.Name.Pascal$Factory
	{
	    private const string key = "$Class.Model$.$Class.Name.Pascal.Plural$.Cache";
		private static readonly object cacheLock = new object();

		#region CodeGuard(Property Empty)

        public static $Class.Name.Pascal$ Empty
        {
            get { return new $Class.Name.Pascal$(); }
        }

		#endregion CodeGuard(Property Empty)

        #region CodeGuard(Method New)

        public static $Class.Name.Pascal$ New()
        {
            return new $Class.Name.Pascal$($Class.Name.Pascal$Gateway.New());
        }

		#endregion CodeGuard(Method New)

		#region CodeGuard(Method List)

		private static DomainCollection<$Class.Name.Pascal$> List(IEnumerable<IInternalState> states)
		{
			return new DomainCollection<$Class.Name.Pascal$>(from state in states select new $Class.Name.Pascal$(state));
		}

		#endregion CodeGuard(Method List)
		
		#region CodeGuard(Method Search)
	    
	    public static DomainCollection<$Class.Name.Pascal$> Search(ISearchObject searchObject)
	    {
	        return List($Class.Name.Pascal$Gateway.Search(searchObject.GetParameters()));
	    }
		
		#endregion CodeGuard(Method Search)
		
		#region CodeGuard(Method Get)

        public static $Class.Name.Pascal$ Get(ID id)
        {
            return GetAll().FirstOrDefault($Class.Name.Pascal.Lower$ => $Class.Name.Pascal.Lower$.Id == id) ?? Empty;
        }
		
		public static DomainCollection<$Class.Name.Pascal$> GetAll()
		{
            lock (cacheLock)
            {
                return StateManager.Application.GetOrSetValue(key, () => List($Class.Name.Pascal$Gateway.GetAll()));
            }
		}
		
		#endregion CodeGuard(Method Get)

		#region CodeGuard(Property Count)

		public static int Count
		{
			get { return GetAll().Count; }
		}

		#endregion CodeGuard(Property Count)

        #region CodeGuard(Method Remove)

        public static bool Remove(this $Class.Name.Pascal$ $Class.Name.Pascal.Lower$)
        {
            if ($Class.Name.Pascal.Lower$ == null) return true;

            ClearCache();

            return $Class.Name.Pascal$Gateway.Remove($Class.Name.Pascal.Lower$.GetState());
        }

        #endregion CodeGuard(Method Remove)
        
        #region CodeGuard(Method Save)

        public static bool Save(this $Class.Name.Pascal$ $Class.Name.Pascal.Lower$)
        {
            if ($Class.Name.Pascal.Lower$ == null)
                return true;

            if ($Class.Name.Pascal.Lower$.IsAltered)
            {
                if (!$Class.Name.Pascal$Gateway.Save($Class.Name.Pascal.Lower$.GetState()))
                {
					return false;
                }
			}

            ClearCache();
                
			return $Class.Name.Pascal.Lower$.SaveCompositions();
        }

        #endregion CodeGuard(Method Save)        
<Tobago.Loop(Class.NavigableAssociations, Associations)>

		public static void ClearCache()
        {
            if (StateManager.Application.Has(key)) StateManager.Application.Remove(key);
        }
	}
}
