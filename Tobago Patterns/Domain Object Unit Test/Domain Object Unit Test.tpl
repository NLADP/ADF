//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Model           : <Tobago.ProjectName>
//     Template        : Business Object Entity UnitTest.tpl
//     Runtime Version : $Version$
//     Generation date : <Tobago.CurrentDate>
//
//     Changes to this file may cause incorrect behavior and may be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Adf.Business;
using Adf.Business.SmartReferences;
using Adf.Business.ValueObject;
using $Class.Model$.Business;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace $Class.Model$.Business.Tests
{
    /// <summary>
    /// This is a test class for $Class.Name$ and is intended
    /// to contain all $Class.Name$ Unit Tests
    /// </summary>
    [TestClass()]
    public partial class $Class.Name$Fixture : BusinessFixtureBase
    {
        #region CodeGuard(TestContext)

        private TestContext testContextInstance;

        /// <summary>
        /// Gets or sets the test context which provides
        /// information about and functionality for the current test run.
        /// </summary>
        public TestContext TestContext
        {
            get {return testContextInstance;}
            set {testContextInstance = value;}
        }

        #endregion CodeGuard(TestContext)

        #region CodeGuard(Initialize and Cleanup)
		
        /// <summary>
        /// Use ClassInitialize to run code before running the first test in the class
        /// </summary>
        /// <param name="testContext">TestContext</param>
        [ClassInitialize()]
        public static void ClassInitialize(TestContext testContext)
        {
            InitializeClass();
        }

        /// <summary>
        /// Use ClassCleanup to run code after all tests in a class have run
        /// </summary>
        [ClassCleanup()]
        public static void ClassCleanup()
        {
            CleanupClass();
        }

        /// <summary>
        /// Use TestInitialize to run code before running each test
        /// </summary>
        [TestInitialize()]
        public void TestInitialize()
        {
            InitializeTest();
        }

        /// <summary>
        /// Use TestCleanup to run code after each test has run
        /// </summary>
        [TestCleanup()]
        public void TestCleanup()
        {
            CleanupTest();
        }

        #endregion CodeGuard(Initialize and Cleanup)

        #region CodeGuard(Method Save Test)

        /// <summary>
        /// A test for Save ()
        /// </summary>
        [TestMethod]
        public void SaveTest()
        {
            $Class.Name$ $Class.Name.Camel$ = $Class.Name$Factory.New();

<Tobago.Loop(Class.Attributes, Attributes)>
            bool result = $Class.Name.Camel$.Save();

            Assert.IsTrue(result, "$Class.Name$. Save did not return the expected value.");
        }

        #endregion CodeGuard(Method SaveTest)
<Tobago.Loop(Class.Attributes, AttributesGet)>
        #region CodeGuard(Custom)

        #endregion CodeGuard(Custom)
    }
}