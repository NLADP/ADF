//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Model           : <Tobago.ProjectName>
//     Template        : Value Object UnitTest.tpl
//     Runtime Version : $Version$
//     Generation date : <Tobago.CurrentDate>
//
//     Changes to this file may cause incorrect behavior and may be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Adf.Business.ValueObject;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ADF.Business.Tests.ValueObject
{
    /// <summary>
    /// Summary description for $Class.Name$Fixture
    /// </summary>
    [TestClass]
    public class $Class.Name$Fixture
    {
		#region CodeGuard(Constants)
		
		private const string VALID_VALUE = "1-59059-441-X";
        private const string INVALID_VALUE = "INVALID";
		
		#endregion CodeGuard(Constants)
       

        #region Additional test attributes

        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //

        #endregion

        #region TryParse

        [TestMethod]
        public void TryParseNull()
        {
            $Class.Name$ new$Class.Name$;

            Assert.IsTrue($Class.Name$.TryParse(null, out new$Class.Name$));
            Assert.IsTrue(new$Class.Name$.IsEmpty);
        }

        [TestMethod]
        public void TryParseStringEmpty()
        {
            $Class.Name$ new$Class.Name$;

            Assert.IsTrue($Class.Name$.TryParse(string.Empty, out new$Class.Name$));
            Assert.IsTrue(new$Class.Name$.IsEmpty);
        }

        [TestMethod]
        public void TryParseValid()
        {
            $Class.Name$ new$Class.Name$;

            Assert.IsTrue($Class.Name$.TryParse(VALID_VALUE, out new$Class.Name$));
            Assert.IsFalse(new$Class.Name$.IsEmpty);
        }

        [TestMethod]
        public void TryParseInValid()
        {
            $Class.Name$ new$Class.Name$;
            Assert.IsFalse($Class.Name$.TryParse(INVALID_VALUE, out new$Class.Name$));
            Assert.IsTrue(new$Class.Name$.IsEmpty);
        }

        #endregion

        #region construction

        [TestMethod]
        public void Construct()
        {
            $Class.Name$ $Class.Name.Camel$ = new $Class.Name$();
            Assert.IsTrue($Class.Name.Camel$.IsEmpty);
        }

        [TestMethod]
        public void ConstructStringEmpty()
        {
            $Class.Name$ $Class.Name.Camel$ = new $Class.Name$(string.Empty);
            Assert.IsTrue($Class.Name.Camel$.IsEmpty);
        }

        [TestMethod]
        public void ConstructNull()
        {
            $Class.Name$ $Class.Name.Camel$ = new $Class.Name$(null);
            Assert.IsTrue($Class.Name.Camel$.IsEmpty);
        }

        [TestMethod]
        public void ConstructValid()
        {
            $Class.Name$ $Class.Name.Camel$ = new $Class.Name$(VALID_VALUE);
            Assert.IsFalse($Class.Name.Camel$.IsEmpty);
        }

        [TestMethod]
        public void ConstructNonValid()
        {
            try
            {
                new $Class.Name$(INVALID_VALUE);
            }
            catch (FormatException)
            {
                //  expected
                return;
            }

            Assert.Fail();
        }

        #endregion
    }
}